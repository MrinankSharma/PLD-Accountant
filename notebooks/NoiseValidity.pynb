{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparing an N times composition with a better value for $\\sigma$ with applying the Gaussian mechanism once!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# enable relative imports\n",
    "import sys\n",
    "import os\n",
    "\n",
    "module_path = os.path.abspath(os.path.join(os.pardir))\n",
    "if module_path not in sys.path:\n",
    "    sys.path.append(module_path)\n",
    "    \n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "from src.compute_eps import get_epsilon_bounded, get_epsilon_unbounded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Consider the add/remove a data-point case\n",
    "This is what the normal moments accountant usually calculates. In this code, this is known as the 'unbounded' case as far as I can tell.\n",
    "\n",
    "**Note, I had to add a sampling probability here, unsure how this affects things precisely. ** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:0.32468870644361975 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:0.32468870644361975 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:0.7050308140515458 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 2 compositions:0.46573014158904846 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:1.1212237376738468 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 3 compositions:0.5759652191915317 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:1.5657519604825731 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 4 compositions:0.6700936216576835 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:2.033363793653404 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 5 compositions:0.7538511591650122 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:2.520295154557059 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 6 compositions:0.8302033568059769 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:3.023836932231686 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 7 compositions:0.900919239286052 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:3.5421315696710733 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 8 compositions:0.9671561242544311 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:4.073899614403535 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 9 compositions:1.0297207663575316 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:4.618269414120231 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 10 compositions:1.0892022344316914 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:5.174646393903069 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 11 compositions:1.146046515362762 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:5.742621564599437 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 12 compositions:1.2006009589880744 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:6.321908303959923 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 13 compositions:1.2531424021350888 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Unbounded DP-epsilon after 1 compositions:6.912301325171134 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Unbounded DP-epsilon after 14 compositions:1.3038956638908281 (delta=1e-06)\n"
     ]
    }
   ],
   "source": [
    "# run up to 100 times, neglect subsampling\n",
    "n_i = np.arange(1, 15)\n",
    "sigma_tilde = 10\n",
    "\n",
    "end_privacy = []\n",
    "intermediate_privacy = []\n",
    "\n",
    "for n in n_i:\n",
    "    print(\"\\nNoise Added at the End Privacy\")\n",
    "    sigma_true = sigma_tilde / n\n",
    "    eps = get_epsilon_unbounded(q=0.8, sigma=sigma_true, ncomp=1)\n",
    "    end_privacy.append(eps)\n",
    "    \n",
    "    print(\"\\nIntermediate Noise Added Privacy\")\n",
    "    sigma_true = sigma_tilde\n",
    "    eps = get_epsilon_unbounded(q=0.8, sigma=sigma_true, ncomp = n)\n",
    "    intermediate_privacy.append(eps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '$\\\\epsilon, \\\\delta = 10^{-5}$')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.plot(n_i, np.array(end_privacy))\n",
    "plt.plot(n_i, np.array(intermediate_privacy))\n",
    "plt.legend(['1 Gaussian Mechanism', 'N Gaussian Mechanisms'])\n",
    "plt.xlabel('N')\n",
    "plt.ylabel('$\\\\epsilon, \\\\delta = 10^{-5}$')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's try with the substitution relation\n",
    "This is the new Réyni DP accountant (I haven't looked into this paper)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:0.8341175469525706 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 1 compositions:0.8341175469525706 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:1.765644397911207 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 2 compositions:1.21196718056191 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:2.755952133607157 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 3 compositions:1.5097698466733214 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:3.797416686847197 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 4 compositions:1.7656443979177439 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:4.8865536471411035 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 5 compositions:1.9945184629964061 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:6.021374931518303 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 6 compositions:2.204118632380092 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:7.200608470900401 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 7 compositions:2.399029363583851 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:8.42337901261892 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 8 compositions:2.5822733661805937 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:9.689052313931024 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 9 compositions:2.755952133640457 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:10.997151144858922 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 10 compositions:2.921600578326674 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:12.347307087148083 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 11 compositions:3.080380679275474 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:13.73922668075776 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 12 compositions:3.2331974315530823 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:15.172597609629433 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 13 compositions:3.3807721354470592 (delta=1e-06)\n",
      "\n",
      "Noise Added at the End Privacy\n",
      "Bounded DP-epsilon after 1 compositions:16.644868126352666 (delta=1e-06)\n",
      "\n",
      "Intermediate Noise Added Privacy\n",
      "Bounded DP-epsilon after 14 compositions:3.5236907855276183 (delta=1e-06)\n"
     ]
    }
   ],
   "source": [
    "# run up to 100 times, neglect subsampling\n",
    "n_i = np.arange(1, 15)\n",
    "sigma_tilde = 10\n",
    "\n",
    "end_privacy = []\n",
    "intermediate_privacy = []\n",
    "\n",
    "for n in n_i:\n",
    "    print(\"\\nNoise Added at the End Privacy\")\n",
    "    sigma_true = sigma_tilde / n\n",
    "    eps = get_epsilon_bounded(q=1, sigma=sigma_true, ncomp=1)\n",
    "    end_privacy.append(eps)\n",
    "    \n",
    "    print(\"\\nIntermediate Noise Added Privacy\")\n",
    "    sigma_true = sigma_tilde\n",
    "    eps = get_epsilon_bounded(q=1, sigma=sigma_true, ncomp = n)\n",
    "    intermediate_privacy.append(eps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '$\\\\epsilon, \\\\delta = 10^{-5}$')"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(n_i, np.array(end_privacy))\n",
    "plt.plot(n_i, np.array(intermediate_privacy))\n",
    "plt.legend(['1 Gaussian Mechanism', 'N Gaussian Mechanisms'])\n",
    "plt.xlabel('N')\n",
    "plt.ylabel('$\\\\epsilon, \\\\delta = 10^{-5}$')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alarming: Privacy Losses are Different!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
